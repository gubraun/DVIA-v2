# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

variables:
  COVERITY_TOOL_HOME: $(Agent.BuildDirectory)/cov-analysis

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
# Copy and install Coverity analysis package (not not cached)
- script: |
    cd $(Agent.BuildDirectory)
    curl -s -L --user admin:$(COVERITY_AUTHKEY) -o license.dat $(COVERITY_URL)/downloadFile.htm?fn=license.dat
    curl -s -L --user admin:$(COVERITY_AUTHKEY) -o cov-analysis-macosx-2020.12.sh $(COVERITY_URL)/downloadFile.htm?fn=cov-analysis-macosx-2020.12.sh
    #bash cov-analysis-macosx-2020.12.sh -q --installation.dir=$(Agent.BuildDirectory)/cov-analysis-macosx-2020.12 --license.region=6 --license.agreement=agree --license.type.choice=0 --license.cov.path=$(Agent.BuildDirectory)/license.dat --component.cov-wizard=false --component.dotnet-sdk=false --component.skip.documentation=true 
    bash cov-analysis-macosx-2020.12.sh -q --installation.dir=$(Agent.BuildDirectory)/cov-analysis-macosx-2020.12 --license.region=6 --license.agreement=agree --license.type.choice=0 --license.cov.path=$(Agent.BuildDirectory)/license.dat --component.cov-wizard=false --component.skip.documentation=true 
    mv cov-analysis-macosx-2020.12 cov-analysis
    cp license.dat ./cov-analysis/bin
  displayName: 'Install Coverity'

# Configure Coverity
- script: |
    $(COVERITY_TOOL_HOME)/bin/cov-configure --swift
    $(COVERITY_TOOL_HOME)/bin/cov-configure --clang
  displayName: 'Configure Coverity'

# Configure Coverity
#- script: |
#    $(COVERITY_TOOL_HOME)/bin/cov-configure --swift
#    $(COVERITY_TOOL_HOME)/bin/cov-configure --delete-compiler-config template-swift-config-0 
#    $(COVERITY_TOOL_HOME)/bin/cov-configure --delete-compiler-config template-swiftc-config-0 
#    $(COVERITY_TOOL_HOME)/bin/cov-configure --swift --xml-option ":<expand><options><replace_arg_regex><replace>(.*)\\\\\s(.*)\\\\\s(.*)\\\\\s(.*)\.swift</replace><with>\$1 \$2 \$3 \$4.swift</with></replace_arg_regex></options></expand>" --xml-option ":<expand><options><replace_arg_regex><replace>(.*)\\\\\s(.*)\\\\\s(.*)\.swift</replace><with>\$1 \$2 \$3.swift</with></replace_arg_regex></options></expand>" --xml-option ":<expand><options><replace_arg_regex><replace>(.*)\\\\\s(.*)\.swift</replace><with>\$1 \$2.swift</with></replace_arg_regex></options></expand>"
#    $(COVERITY_TOOL_HOME)/bin/cov-configure --clang
#  displayName: 'Configure Coverity'

# Workaround to use Modern Build System
#- task: CmdLine@2
#  inputs:
#    script: |
#      cat >swiftc.c <<EOL
#      #include <unistd.h>
#      const char driver_mode[7] = "swiftc";
#      int main(int argc, char *argv[]) {
#        argv[0] = (char *)driver_mode;
#        return execv("/Applications/Xcode_10.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift", argv);
#      }
#      EOL
#      clang swiftc.c -o swiftc
#      rm /Applications/Xcode_10.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc
#      cp swiftc /Applications/Xcode_10.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
#      echo $(Build.Repository.LocalPath)

- script: |
    cd $(Build.Repository.LocalPath)/DVIA-v2
    pod install
  displayName: 'Install Pods'

- script: |
    export COVERITY_EMIT_UNSUPPORTED_SWIFT_VERSION=1
    $(COVERITY_TOOL_HOME)/bin/cov-build --dir $(Build.Repository.LocalPath)/idir --fs-capture-search $(Build.Repository.LocalPath)/DVIA-v2 /Applications/Xcode_10.3.app/Contents/Developer/usr/bin/xcodebuild -sdk iphonesimulator12.4 -configuration Release -workspace $(Build.Repository.LocalPath)/DVIA-v2/DVIA-v2.xcworkspace -scheme DVIA-v2 build CODE_SIGNING_ALLOWED=NO -UseModernBuildSystem=NO
    $(COVERITY_TOOL_HOME)/bin/cov-analyze --dir $(Build.Repository.LocalPath)/idir --strip-path $(Build.Repository.LocalPath) --distrust-all --enable-audit-mode

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)/idir/'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

# Artifacts can be downloaded via web - see top-level log for Job
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    publishLocation: 'pipeline'